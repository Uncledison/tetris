// Ï†êÏàò Í≥ÑÏÇ∞ ÏÉÅÏàò
const POINTS = {
    SINGLE: 100,      // 1Ï§Ñ
    DOUBLE: 300,      // 2Ï§Ñ
    TRIPLE: 500,      // 3Ï§Ñ
    TETRIS: 800,      // 4Ï§Ñ
    SOFT_DROP: 1,     // ÏÜåÌîÑÌä∏ ÎìúÎ°≠ (Ìïú Ïπ∏Îãπ)
    HARD_DROP: 2      // ÌïòÎìú ÎìúÎ°≠ (Ìïú Ïπ∏Îãπ)
};

// Î†àÎ≤®Î≥Ñ ÎÇôÌïò ÏÜçÎèÑ (Î∞ÄÎ¶¨Ï¥à)
const LEVEL_SPEEDS = [
    800,  // Level 1
    720,  // Level 2
    630,  // Level 3
    550,  // Level 4
    470,  // Level 5
    380,  // Level 6
    300,  // Level 7
    220,  // Level 8
    130,  // Level 9
    100,  // Level 10
    80,   // Level 11+
];

// Ï§Ñ Ï†úÍ±∞ ÌôïÏù∏
function checkLines() {
    let linesCleared = 0;
    let linesToClear = [];

    // ÏôÑÏÑ±Îêú Ï§Ñ Ï∞æÍ∏∞
    for (let row = ROWS - 1; row >= 0; row--) {
        if (game.board[row].every(cell => cell !== 0)) {
            linesToClear.push(row);
            linesCleared++;
        }
    }

    // Ï§Ñ Ï†úÍ±∞ Ïï†ÎãàÎ©îÏù¥ÏÖò Î∞è Ï≤òÎ¶¨
    if (linesCleared > 0) {
        // üîä ÎùºÏù∏ ÌÅ¥Î¶¨Ïñ¥ ÏÇ¨Ïö¥Îìú Ïû¨ÏÉù
        console.log('ÎùºÏù∏ ÌÅ¥Î¶¨Ïñ¥ ÏÇ¨Ïö¥Îìú Ïû¨ÏÉù ÏãúÎèÑ, Ï§Ñ:', linesCleared);
        if (window.sounds) {
            window.sounds.play('clear');
        } else {
            console.error('sounds Í∞ùÏ≤¥Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§!');
        }
        
        // Ïï†ÎãàÎ©îÏù¥ÏÖò Ìö®Í≥º
        animateLinesClear(linesToClear);
        
        // Ï§Ñ Ï†úÍ±∞
        setTimeout(() => {
            removeLines(linesToClear);
            
            // Ï†êÏàò Í≥ÑÏÇ∞
            updateScore(linesCleared);
            
            // Ï§Ñ Ïàò ÏóÖÎç∞Ïù¥Ìä∏
            game.lines += linesCleared;
            
            // Î†àÎ≤® ÏóÖ (10Ï§ÑÎßàÎã§)
            const newLevel = Math.floor(game.lines / 10) + 1;
            if (newLevel > game.level) {
                game.level = newLevel;
                // üîä Î†àÎ≤®ÏóÖ ÏÇ¨Ïö¥Îìú Ïû¨ÏÉù
                console.log('Î†àÎ≤®ÏóÖ ÏÇ¨Ïö¥Îìú Ïû¨ÏÉù ÏãúÎèÑ');
                if (window.sounds) {
                    window.sounds.play('levelUp');
                } else {
                    console.error('sounds Í∞ùÏ≤¥Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§!');
                }
                updateGameSpeed();
            }
            
            updateUI();
        }, 200);
    }

    return linesCleared;
}

// Ï§Ñ Ï†úÍ±∞ Ïï†ÎãàÎ©îÏù¥ÏÖò
function animateLinesClear(lines) {
    const linesCount = lines.length;
    
    // üîä ÌÖåÌä∏Î¶¨Ïä§ ÌäπÎ≥Ñ Ìö®Í≥ºÏùå
    if (linesCount === 4) {
        console.log('ÌÖåÌä∏Î¶¨Ïä§ ÌäπÎ≥Ñ ÏÇ¨Ïö¥Îìú Ïû¨ÏÉù ÏãúÎèÑ');
        if (window.sounds) {
            window.sounds.play('whoosh');
        } else {
            console.error('sounds Í∞ùÏ≤¥Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§!');
        }
    }
    
    // üí• ÏßÑÎèô Í∞ïÎèÑ ÎåÄÌè≠ Ï¶ùÍ∞Ä
    if (navigator.vibrate) {
        if (linesCount === 4) {
            navigator.vibrate([100, 50, 100, 50, 150]); // ÌÖåÌä∏Î¶¨Ïä§: Îçî Í∞ïÎ†•Ìïú ÏßÑÎèô
        } else if (linesCount >= 3) {
            navigator.vibrate([80, 40, 120]); // Ìä∏Î¶¨Ìîå
        } else if (linesCount === 2) {
            navigator.vibrate([60, 30, 90]); // ÎçîÎ∏î
        } else {
            navigator.vibrate(70); // Ïã±Í∏Ä
        }
    }
    
    // üí• ÌôîÎ©¥ ÌùîÎì§Î¶º Ìö®Í≥º - 3Î∞∞ Í∞ïÌôî!
    const shakeIntensity = linesCount === 4 ? 30 : linesCount === 3 ? 20 : linesCount === 2 ? 10 : 5;
    shakeScreen(shakeIntensity);
    
    // 1Îã®Í≥Ñ: ÌôîÎ©¥ Ï†ÑÏ≤¥ ÌîåÎûòÏãú (ÌÖåÌä∏Î¶¨Ïä§Îäî ÌôîÎ©¥ Ï†ÑÏ≤¥)
    if (linesCount === 4) {
        // ÌôîÎ©¥ Ï†ÑÏ≤¥ ÌïòÏñóÍ≤å Î≤àÏ©ç!
        ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';
        ctx.fillRect(0, 0, canvas.width, canvas.height);
    }
    
    // ÎùºÏù∏ Î∞ùÍ≤å ÎπõÎÇòÍ∏∞
    lines.forEach(row => {
        for (let col = 0; col < COLS; col++) {
            // ÏÉâÏÉÅ Í∞ïÌôî
            if (linesCount === 4) {
                ctx.fillStyle = '#ffffff'; // ÌÖåÌä∏Î¶¨Ïä§: ÏàúÎ∞±
            } else if (linesCount === 3) {
                ctx.fillStyle = '#ff0066'; // Ìä∏Î¶¨Ìîå: Ìï´ÌïëÌÅ¨
            } else if (linesCount === 2) {
                ctx.fillStyle = '#ff9900'; // ÎçîÎ∏î: Ïò§Î†åÏßÄ
            } else {
                ctx.fillStyle = '#ffff00'; // Ïã±Í∏Ä: ÎÖ∏Îûë
            }
            ctx.fillRect(col * BLOCK_SIZE, row * BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE);
            
            // Ïô∏Í≥Ω Í∏ÄÎ°úÏö∞ Í∞ïÌôî
            ctx.shadowColor = linesCount === 4 ? '#00ffff' : '#ffaa00';
            ctx.shadowBlur = linesCount === 4 ? 30 : 20; // Îçî Í∞ïÌïòÍ≤å
            ctx.strokeStyle = ctx.shadowColor;
            ctx.lineWidth = 4; // Îçî ÎëêÍªçÍ≤å
            ctx.strokeRect(col * BLOCK_SIZE, row * BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE);
            ctx.shadowBlur = 0;
        }
    });
    
    // 2Îã®Í≥Ñ: ÌÅ¨Îûô Ìö®Í≥º (10ms ÌõÑ - 5Î∞∞ Îπ†Î•¥Í≤å!)
    setTimeout(() => {
        lines.forEach(row => {
            for (let col = 0; col < COLS; col++) {
                const distance = Math.abs(col - COLS/2);
                setTimeout(() => {
                    ctx.fillStyle = linesCount === 4 ? 'rgba(0, 255, 255, 0.9)' : 'rgba(255, 100, 0, 0.8)';
                    ctx.fillRect(col * BLOCK_SIZE, row * BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE);
                }, distance * 5); // 2Î∞∞ Îπ†Î•¥Í≤å
            }
        });
    }, 10); // 5Î∞∞ Îπ†Î•¥Í≤å!
    
    // 3Îã®Í≥Ñ: ÎåÄÌè≠Î∞ú ÌååÌã∞ÌÅ¥ (20ms ÌõÑ - 7Î∞∞ Îπ†Î•¥Í≤å!)
    setTimeout(() => {
        createMassiveExplosion(lines, linesCount);
    }, 20); // 5Î∞∞ Îπ†Î•¥Í≤å!
    
    // ÌÖåÌä∏Î¶¨Ïä§ Ï†ÑÏö© Ìö®Í≥º
    if (linesCount === 4) {
        createEnhancedLightning();
        createTripleShockwave();
        
        // "TETRIS!" ÌÖçÏä§Ìä∏
        showTetrisText();
    }
}

// üí• ÎåÄÌè≠Î∞ú ÌååÌã∞ÌÅ¥ ÏÉùÏÑ± (6Î∞∞ Ï¶ùÍ∞Ä!)
function createMassiveExplosion(lines, linesCount) {
    // ÌååÌã∞ÌÅ¥ Ïàò ÎåÄÌè≠ Ï¶ùÍ∞Ä!
    const particleCount = linesCount === 4 ? 300 : linesCount === 3 ? 150 : linesCount === 2 ? 100 : 50;
    
    const colors = linesCount === 4 
        ? ['#ff0000', '#ff7700', '#ffff00', '#00ff00', '#0099ff', '#4400ff', '#ff00ff'] // Î¨¥ÏßÄÍ∞ú 7ÏÉâ
        : linesCount >= 3
        ? ['#ff00ff', '#ff0099', '#ff00cc', '#ff3366'] // ÌïëÌÅ¨ Í≥ÑÏó¥
        : linesCount === 2
        ? ['#ff7700', '#ff0000', '#ff4400'] // Ï£ºÌô©/Îπ®Í∞ï
        : ['#ffff00', '#ffaa00', '#ffcc00']; // ÎÖ∏Îûë
    
    lines.forEach(row => {
        for (let i = 0; i < particleCount / lines.length; i++) {
            const col = Math.random() * COLS;
            const x = col * BLOCK_SIZE;
            const y = row * BLOCK_SIZE;
            const angle = Math.random() * Math.PI * 2;
            const speed = 5 + Math.random() * 10; // 3Î∞∞ Îπ†Î•¥Í≤å!
            const size = 3 + Math.random() * 5; // Îçî ÌÅ¨Í≤å!
            const color = colors[Math.floor(Math.random() * colors.length)];
            
            animateParticle(x, y, angle, speed, size, color, 25); // ÏßßÍ≤å! 25ÌîÑÎ†àÏûÑ
        }
    });
}

// Í∞úÎ≥Ñ ÌååÌã∞ÌÅ¥ Ïï†ÎãàÎ©îÏù¥ÏÖò (Îπ†Î•¥Í≤å ÏÇ¨ÎùºÏßê)
function animateParticle(startX, startY, angle, speed, size, color, maxLife = 25) {
    let x = startX;
    let y = startY;
    let life = 1.0;
    let frame = 0;
    const fadeSpeed = 1.2 / maxLife; // Îçî Îπ†Î•¥Í≤å ÌéòÏù¥Îìú
    
    const animate = () => {
        if (life <= 0 || frame > maxLife) return;
        
        x += Math.cos(angle) * speed;
        y += Math.sin(angle) * speed;
        life -= fadeSpeed;
        frame++;
        
        // Îπ†Î•¥Í≤å ÌéòÏù¥Îìú ÏïÑÏõÉ
        const alpha = Math.max(0, life * life); // Ï†úÍ≥±ÏúºÎ°ú Îçî Îπ†Î•¥Í≤å
        
        ctx.save();
        ctx.globalAlpha = alpha;
        ctx.fillStyle = color;
        
        // Î≥Ñ Î™®ÏñëÏúºÎ°ú Í∑∏Î¶¨Í∏∞
        ctx.beginPath();
        ctx.arc(x, y, size * life, 0, Math.PI * 2);
        ctx.fill();
        
        // Ïô∏Í≥Ω Í∏ÄÎ°úÏö∞ (ÏïΩÌïòÍ≤å)
        if (alpha > 0.5) {
            ctx.shadowColor = color;
            ctx.shadowBlur = 8;
            ctx.arc(x, y, size * life * 0.5, 0, Math.PI * 2);
            ctx.fill();
        }
        
        ctx.restore();
        
        requestAnimationFrame(animate);
    };
    
    animate();
}

// ÌôîÎ©¥ ÌùîÎì§Î¶º Í∞ïÌôî (Îçî Îπ†Î•¥Í≤å)
function shakeScreen(intensity) {
    const gameContainer = document.querySelector('.game-container');
    let shakeCount = 0;
    const maxShakes = intensity > 20 ? 8 : 5; // ÌöüÏàò Ï§ÑÏûÑ
    
    const shakeInterval = setInterval(() => {
        if (shakeCount >= maxShakes) {
            clearInterval(shakeInterval);
            gameContainer.style.transform = 'translate(0, 0)';
            return;
        }
        const x = (Math.random() - 0.5) * intensity;
        const y = (Math.random() - 0.5) * intensity;
        gameContainer.style.transform = `translate(${x}px, ${y}px)`;
        shakeCount++;
    }, 20); // Îçî Îπ†Î•¥Í≤å (30ms ‚Üí 20ms)
}

// Í∞ïÌôîÎêú Î≤àÍ∞ú Ìö®Í≥º (10Í∞ú, Îçî ÎëêÍªçÍ≤å)
function createEnhancedLightning() {
    const canvas = document.getElementById('gameCanvas');
    
    // ÌÖåÎëêÎ¶¨ Î≤àÏ©çÏûÑ Í∞ïÌôî
    canvas.style.boxShadow = '0 0 80px #00ffff, 0 0 150px #00ffff, 0 0 200px #00ffff';
    setTimeout(() => {
        canvas.style.boxShadow = '0 0 20px rgba(0, 212, 255, 0.3)';
    }, 300);
    
    // Î≤àÍ∞ú ÏÑ† Í∑∏Î¶¨Í∏∞ (10Í∞ú!)
    ctx.save();
    
    for (let i = 0; i < 10; i++) {
        setTimeout(() => {
            ctx.strokeStyle = i % 2 === 0 ? '#00ffff' : '#ffffff';
            ctx.lineWidth = 5; // Îçî ÎëêÍªçÍ≤å
            ctx.shadowColor = '#00ffff';
            ctx.shadowBlur = 30;
            
            ctx.beginPath();
            let startX = Math.random() * canvas.width;
            ctx.moveTo(startX, 0);
            
            const segments = 8; // Îçî ÎßéÏùÄ ÏÑ∏Í∑∏Î®ºÌä∏
            for (let s = 0; s < segments; s++) {
                const nextX = startX + (Math.random() - 0.5) * 60;
                const nextY = (canvas.height / segments) * (s + 1);
                ctx.lineTo(nextX, nextY);
                startX = nextX;
            }
            ctx.stroke();
        }, i * 30);
    }
    
    ctx.restore();
}

// 3Ï§ë Ï∂©Í≤©Ìåå
function createTripleShockwave() {
    const centerX = canvas.width / 4;
    const centerY = canvas.height / 4;
    
    // 3Í∞úÏùò Ï∂©Í≤©ÌååÎ•º ÏãúÏ∞®Î•º ÎëêÍ≥† Î∞úÏÉù
    [0, 100, 200].forEach((delay, index) => {
        setTimeout(() => {
            let radius = 0;
            const maxRadius = 250;
            const colors = ['#00ffff', '#ffffff', '#00ffff'];
            
            const animate = () => {
                if (radius > maxRadius) return;
                
                ctx.save();
                ctx.strokeStyle = colors[index % colors.length];
                ctx.lineWidth = 4;
                ctx.globalAlpha = 1 - (radius / maxRadius);
                ctx.shadowColor = colors[index % colors.length];
                ctx.shadowBlur = 20;
                
                ctx.beginPath();
                ctx.arc(centerX, centerY, radius, 0, Math.PI * 2);
                ctx.stroke();
                ctx.restore();
                
                radius += 15; // Îçî Îπ†Î•¥Í≤å
                requestAnimationFrame(animate);
            };
            
            animate();
        }, delay);
    });
}

// "TETRIS!" ÌÖçÏä§Ìä∏ ÌëúÏãú
function showTetrisText() {
    const popup = document.getElementById('scorePopup');
    const tetrisText = document.createElement('div');
    tetrisText.style.position = 'absolute';
    tetrisText.style.left = '50%';
    tetrisText.style.top = '30%';
    tetrisText.style.transform = 'translateX(-50%)';
    tetrisText.style.fontSize = '4rem';
    tetrisText.style.fontWeight = 'bold';
    tetrisText.style.color = '#00ffff';
    tetrisText.style.textShadow = '0 0 20px #00ffff, 0 0 40px #00ffff, 0 0 60px #00ffff';
    tetrisText.style.animation = 'tetrisPop 1s ease-out';
    tetrisText.textContent = 'TETRIS!';
    
    popup.appendChild(tetrisText);
    
    setTimeout(() => {
        if (popup.contains(tetrisText)) {
            popup.removeChild(tetrisText);
        }
    }, 1000);
}

// Ï†êÏàò ÌåùÏóÖ ÌëúÏãú
function showScorePopup(points, linesCleared) {
    const popup = document.getElementById('scorePopup');
    const popupText = document.createElement('div');
    popupText.className = linesCleared >= 3 ? 'popup-text combo-text' : 'popup-text';
    
    let message = '';
    switch(linesCleared) {
        case 1: message = `+${points}`; break;
        case 2: message = `DOUBLE! +${points}`; break;
        case 3: message = `TRIPLE! +${points}`; break;
        case 4: message = `TETRIS! +${points}`; break;
    }
    
    popupText.textContent = message;
    popupText.style.left = '50%';
    popupText.style.top = '40%';
    popupText.style.transform = 'translateX(-50%)';
    
    popup.appendChild(popupText);
    
    setTimeout(() => {
        popup.removeChild(popupText);
    }, 1000);
}

// Ï§Ñ Ï†úÍ±∞ Î∞è ÏúÑ Î∏îÎ°ù ÎÇ¥Î¶¨Í∏∞
function removeLines(linesToClear) {
    // Ï†úÍ±∞Ìï† Ï§ÑÏùÑ ÏúÑÏóêÏÑúÎ∂ÄÌÑ∞ Ï†ïÎ†¨
    linesToClear.sort((a, b) => a - b);

    // Í∞Å Ï§Ñ Ï†úÍ±∞
    linesToClear.forEach(lineIndex => {
        // Ìï¥Îãπ Ï§Ñ ÏÇ≠Ï†ú
        game.board.splice(lineIndex, 1);
        // Îß® ÏúÑÏóê Îπà Ï§Ñ Ï∂îÍ∞Ä
        game.board.unshift(Array(COLS).fill(0));
    });
}

// Ï†êÏàò ÏóÖÎç∞Ïù¥Ìä∏
function updateScore(linesCleared) {
    let points = 0;

    switch(linesCleared) {
        case 1:
            points = POINTS.SINGLE;
            break;
        case 2:
            points = POINTS.DOUBLE;
            break;
        case 3:
            points = POINTS.TRIPLE;
            break;
        case 4:
            points = POINTS.TETRIS;
            break;
    }

    // Î†àÎ≤® Î∞∞Ïàò Ï†ÅÏö©
    points *= game.level;
    game.score += points;
    
    // Ï†êÏàò ÌåùÏóÖ ÌëúÏãú
    showScorePopup(points, linesCleared);
}

// Í≤åÏûÑ ÏÜçÎèÑ ÏóÖÎç∞Ïù¥Ìä∏
function updateGameSpeed() {
    if (game.gameLoop) {
        clearInterval(game.gameLoop);
        startGameLoop();
    }
}

// Í≤åÏûÑ ÏÜçÎèÑ Í∞ÄÏ†∏Ïò§Í∏∞
function getGameSpeed() {
    const speedIndex = Math.min(game.level - 1, LEVEL_SPEEDS.length - 1);
    return LEVEL_SPEEDS[speedIndex];
}

// Î∏îÎ°ù ÏïÑÎûòÎ°ú Ïù¥Îèô
function moveDown() {
    if (!game.currentPiece) return false;

    if (!game.currentPiece.hasCollision(0, 1)) {
        game.currentPiece.move(0, 1);
        return true;
    } else {
        // üîä Î∏îÎ°ù Ï∞©ÏßÄ ÏÇ¨Ïö¥Îìú
        console.log('Ï∞©ÏßÄ ÏÇ¨Ïö¥Îìú Ïû¨ÏÉù ÏãúÎèÑ');
        if (window.sounds) {
            window.sounds.play('drop');
        } else {
            console.error('sounds Í∞ùÏ≤¥Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§!');
        }
        
        // Î∏îÎ°ù Í≥†Ï†ï Ïãú ÏßÑÎèô
        if (navigator.vibrate) {
            navigator.vibrate(50);
        }
        
        // Î∏îÎ°ù Í≥†Ï†ï
        game.currentPiece.lock();
        
        // Ï§Ñ Ï†úÍ±∞ ÌôïÏù∏
        checkLines();
        
        // ÏÉà Î∏îÎ°ù ÏÉùÏÑ±
        spawnNewPiece();
        
        return false;
    }
}

// Î∏îÎ°ù Ï¢åÏö∞ Ïù¥Îèô
function moveLeft() {
    if (!game.currentPiece || game.isPaused || !game.isRunning) return;
    
    if (!game.currentPiece.hasCollision(-1, 0)) {
        // üîä Ïù¥Îèô ÏÇ¨Ïö¥Îìú
        console.log('Ïù¥Îèô ÏÇ¨Ïö¥Îìú Ïû¨ÏÉù ÏãúÎèÑ');
        if (window.sounds) {
            window.sounds.play('move');
        } else {
            console.error('sounds Í∞ùÏ≤¥Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§!');
        }
        game.currentPiece.move(-1, 0);
        console.log('ÏôºÏ™Ω Ïù¥Îèô, ÌòÑÏû¨ x:', game.currentPiece.x);
        render();
    }
}

function moveRight() {
    if (!game.currentPiece || game.isPaused || !game.isRunning) return;
    
    if (!game.currentPiece.hasCollision(1, 0)) {
        // üîä Ïù¥Îèô ÏÇ¨Ïö¥Îìú
        console.log('Ïù¥Îèô ÏÇ¨Ïö¥Îìú Ïû¨ÏÉù ÏãúÎèÑ');
        if (window.sounds) {
            window.sounds.play('move');
        } else {
            console.error('sounds Í∞ùÏ≤¥Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§!');
        }
        game.currentPiece.move(1, 0);
        console.log('Ïò§Î•∏Ï™Ω Ïù¥Îèô, ÌòÑÏû¨ x:', game.currentPiece.x);
        render();
    }
}

// Î∏îÎ°ù ÌöåÏ†Ñ
function rotatePiece() {
    if (!game.currentPiece || game.isPaused || !game.isRunning) {
        console.log('ÌöåÏ†Ñ Î∂àÍ∞Ä:', { 
            hasPiece: !!game.currentPiece, 
            isPaused: game.isPaused,
            isRunning: game.isRunning 
        });
        return;
    }
    
    // üîä ÌöåÏ†Ñ ÏÇ¨Ïö¥Îìú
    console.log('ÌöåÏ†Ñ ÏÇ¨Ïö¥Îìú Ïû¨ÏÉù ÏãúÎèÑ');
    if (window.sounds) {
        window.sounds.play('rotate');
    } else {
        console.error('sounds Í∞ùÏ≤¥Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§!');
    }
    console.log('Î∏îÎ°ù ÌöåÏ†Ñ!');
    game.currentPiece.rotate();
    render();
}

// ÏÜåÌîÑÌä∏ ÎìúÎ°≠ (Îπ†Î•∏ ÎÇôÌïò)
function softDrop() {
    if (!game.currentPiece || game.isPaused) return;
    
    if (moveDown()) {
        game.score += POINTS.SOFT_DROP;
        updateUI();
        render();
    }
}

// ÌïòÎìú ÎìúÎ°≠ (Ï¶âÏãú Ï∞©ÏßÄ)
function hardDrop() {
    if (!game.currentPiece || game.isPaused || !game.isRunning) {
        console.log('ÌïòÎìúÎìúÎ°≠ Î∂àÍ∞Ä:', { 
            hasPiece: !!game.currentPiece, 
            isPaused: game.isPaused,
            isRunning: game.isRunning 
        });
        return;
    }
    
    console.log('ÌïòÎìú ÎìúÎ°≠!');
    
    let dropDistance = 0;
    while (!game.currentPiece.hasCollision(0, 1)) {
        game.currentPiece.move(0, 1);
        dropDistance++;
    }
    
    game.score += POINTS.HARD_DROP * dropDistance;
    
    // üîä ÌïòÎìú ÎìúÎ°≠ ÏÇ¨Ïö¥Îìú (drop ÏÇ¨Ïö¥ÎìúÎäî Ï∞©ÏßÄ Ïãú ÏûêÎèô Ïû¨ÏÉùÎê®)
    
    // Î∏îÎ°ù Í≥†Ï†ï
    game.currentPiece.lock();
    checkLines();
    spawnNewPiece();
    
    updateUI();
    render();
}

// ÏÉà Î∏îÎ°ù ÏÉùÏÑ±
function spawnNewPiece() {
    game.currentPiece = game.nextPiece;
    game.nextPiece = getNextPiece();
    
    // Îã§Ïùå Î∏îÎ°ù ÎØ∏Î¶¨Î≥¥Í∏∞
    game.nextPiece.drawNext();
    
    // Í≤åÏûÑ Ïò§Î≤Ñ Ï≤¥ÌÅ¨
    if (game.currentPiece.hasCollision()) {
        gameOver();
    }
}

// Í≤åÏûÑ Î£®ÌîÑ ÏãúÏûë
function startGameLoop() {
    game.gameLoop = setInterval(() => {
        if (!game.isPaused && game.isRunning) {
            moveDown();
            render();
        }
    }, getGameSpeed());
}

// Î†åÎçîÎßÅ
function render() {
    if (!game.isRunning) return;
    
    // Î≥¥Îìú Í∑∏Î¶¨Í∏∞
    drawBoard();
    
    // ÌòÑÏû¨ Î∏îÎ°ùÏù¥ ÏûàÏúºÎ©¥ Í≥†Ïä§Ìä∏ÏôÄ Î∏îÎ°ù Í∑∏Î¶¨Í∏∞
    if (game.currentPiece) {
        game.currentPiece.drawGhost();
        game.currentPiece.draw();
    }
}

// Î≥¥Îìú Ï¥àÍ∏∞Ìôî (Í≤åÏûÑ ÏãúÏûë Ïãú)
function resetBoard() {
    game.board = Array.from({ length: ROWS }, () => Array(COLS).fill(0));
}

// Î≥¥ÎìúÍ∞Ä Í∞ÄÎìù Ï∞ºÎäîÏßÄ ÌôïÏù∏
function isBoardFull() {
    return game.board[0].some(cell => cell !== 0);
}

// Î≥¥Îìú ÏÉÅÌÉú Ï∂úÎ†• (ÎîîÎ≤ÑÍπÖÏö©)
function printBoard() {
    console.log('=== Í≤åÏûÑ Î≥¥Îìú ===');
    game.board.forEach((row, index) => {
        console.log(`${index.toString().padStart(2)}: ${row.map(cell => cell || '.').join(' ')}`);
    });
}

// ÌÜµÍ≥Ñ Ï†ïÎ≥¥
function getStats() {
    return {
        score: game.score,
        level: game.level,
        lines: game.lines,
        speed: getGameSpeed()
    };
}

console.log('Board Î™®Îìà Î°úÎìú ÏôÑÎ£å!');
